// portfolios/portfolioSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  items: [],
  errors: null, // Changed to null for consistency, can be an array if multiple errors are expected
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
};

// Async thunk for fetching portfolios
export const getPortfolios = createAsyncThunk(
  'portfolio/getPortfolios', // Action type prefix
  async (_, { rejectWithValue }) => {
    // The first argument is 'arg', which we don't use here, hence '_'
    const url = 'https://vmwhoami-portfolio-mern.herokuapp.com/api/v1/portfolios';
    try {
      const response = await axios.get(url);
      return response.data; // This will be the payload of the fulfilled action
    } catch (error) {
      // Use rejectWithValue to pass a specific error payload
      return rejectWithValue(error.response ? error.response.data : error.message);
    }
  }
);

const portfolioSlice = createSlice({
  name: 'portfolio',
  initialState,
  reducers: {
    // You can add synchronous reducers here if needed
    // e.g., clearErrors: (state) => { state.errors = null; }
  },
  extraReducers: (builder) => {
    builder
      .addCase(getPortfolios.pending, (state) => {
        state.status = 'loading';
        state.errors = null;
      })
      .addCase(getPortfolios.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(getPortfolios.rejected, (state, action) => {
        state.status = 'failed';
        state.errors = action.payload; // Error payload from rejectWithValue
      });
  },
});

// Export the reducer
export default portfolioSlice.reducer;

// Synchronous action creators are automatically generated by createSlice
// export const { clearErrors } = portfolioSlice.actions;